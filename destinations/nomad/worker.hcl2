job "galaxy-worker" {
  name = "${name}"
  namespace = "${namespace}"
  type = "service"
  # TODO constraint https://www.nomadproject.io/docs/job-specification/constraint
  # TODO affinity https://www.nomadproject.io/docs/job-specification/affinity
  # TODO spread https://www.nomadproject.io/docs/job-specification/spread
  # TODO update {}

  group "nginx" {
    # TODO migrate {} https://www.nomadproject.io/docs/job-specification/migrate
    # TODO restart {} https://www.nomadproject.io/docs/job-specification/restart
    task {
      driver = "docker"
      config {
        image = "${image}:${tag}"
        # TODO auth https://www.nomadproject.io/docs/drivers/docker#auth
        command = "sh"
        args = ["-c", "/env_run.sh python3 ${root_dir}/scripts/galaxy-main -c ${config_dir}/galaxy.yml --server-name=$HOSTNAME --log-file=/dev/stdout --attach-to-pool=job-handlers"]
      }

      service {
        check {
          name = "check_uwsgi"
          type = "script"
          command = "uwping"
          args = ["uwsgi://localhost:${uwsgi_port}/api/version"]
          interval = 2
          success_before_passing = 3
          failures_before_critical = 1
          check_restart {
            limit = 3
            grace = "90s"
            ignore_warnings = false
          }
        }
      }

      %{for name, value in envs}
      env {
        name = "${name}"
        value = "${value}"
      }
      %{ endfor ~}

      volume_mount {
        destination = "${data_dir}"
        volume = "data"
      }

      %{ for key, value in configs }
      template {
        destination = "${config_dir}/macros/${key}"
        change_mode = "restart"
        data = <<EOF
${value}
EOF
      }
      %{ endfor ~}

      %{for key, value in extra_mounts}
      volume_mount {
        destination = "${value.path}"
        read_only = "${value.read_only}"
        name = "${key}"
      }
      %{ endfor ~}
    }

    network {
      port "http" {
        to = 80
      }
      # TODO https offload for service
    }

    volume "data" {
      type = "csi"
      source = "${user_data}"
    }

    %{for key, value in extra_mounts}
    volume "${key}" {
      type = "csi"
      source = "${value.volume_id}"
    }
    %{ endfor ~}

    count = 3 # TODO https://github.com/galaxyproject/galaxy/issues/10243
    /*scaling {
      enabled = true
      min = 1
      max = 10
      policy {}
    }*/
  }
}